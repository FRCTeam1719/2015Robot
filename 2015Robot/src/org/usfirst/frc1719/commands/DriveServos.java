// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1719.commands;

import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc1719.Robot;

/**
 *
 */
public class  DriveServos extends Command {

	//finds the input from the numbers
	static final int JOYSTICK_RIGHT_X = 4;
	static final int JOYSTICK_RIGHT_Y = 5;
	public static final int JOYSTICK_RIGHT_BUTTON = 10;
	final boolean OPERATOR = true;
	final boolean DRIVER = false;

    public DriveServos() {
        // Use requires() here to declare subsystem dependencies
        // eg. requires(chassis);

        requires(Robot.cameraMount);

    }

    // Called just before this Command runs the first time
    protected void initialize() {
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	//The camera can only be moved if the right joystick is pushed in
    	
    	//gets joystick values
    	double joystickXPosition = Robot.oi.getCameraX();
    	double joystickYPosition = Robot.oi.getCameraY();
    	
    	
    	
    	//pans using the values gotten from the joystick
    	Robot.cameraMount.setXServoPan(joystickXPosition);
    	Robot.cameraMount.setYServoPan(joystickYPosition);
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}

// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1719;

import org.usfirst.frc1719.commands.AutonomousCommand;
import org.usfirst.frc1719.commands.CentreCamera;
import org.usfirst.frc1719.commands.DriveServos;
import org.usfirst.frc1719.commands.MoveElevatorToPos;
import org.usfirst.frc1719.commands.ToggleCamera;
import org.usfirst.frc1719.commands.ToggleElevator;
import org.usfirst.frc1719.commands.TransferCameraControl;
import org.usfirst.frc1719.commands.TurnToCamera;
import org.usfirst.frc1719.commands.UseDrive;
import org.usfirst.frc1719.subsystems.Elevator;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
//import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
	
	//Magic number declarations for buttons
	public final static int A_BUTTON = 1;
	public final static int B_BUTTON = 2;
	public final static int X_BUTTON = 3;
	public final static int Y_BUTTON = 4;
	public final static int LEFT_BUMPER  = 5;
	public final static int RIGHT_BUMPER = 6;
	public final static int BACK_BUTTON  = 7;
	public final static int START_BUTTON = 8;
	public final static int LEFT_JOYSTICK_BUTTON = 9;
	public final static int RIGHT_JOYSTICK_BUTTON = 10;
	
	public final static int LEFT_JOYSTICK_X_AXIS = 0;
	public final static int LEFT_JOYSTICK_Y_AXIS = 1;
	public final static int RIGHT_JOYSTICK_X_AXIS = 4;
	public final static int RIGHT_JOYSTICK_Y_AXIS = 5;
	public final static int LEFT_TRIGGER  = 2;
	public final static int RIGHT_TRIGGER = 3;
	
	//POV is the big plus thingy
	public final static int POV_NUMBER = 0;
	
    public static final int TRANSFER_CAMERA_CONTROL_BUTTON = 1;
    
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    private Joystick driverJoystick;
    private Joystick operatorJoystick;
    private JoystickButton rightBumper;
    private JoystickButton leftBumper;
    private JoystickButton bottomButton1;
    private JoystickButton bottomButton2;
    private JoystickButton bottomButton3;
    private JoystickButton bottomButton4;
    private JoystickButton bottomButton5;
    private JoystickButton bottomButton6;
    private JoystickButton switchElevatorFront;
    private JoystickButton switchElevatorBack;



    public OI() {

        driverJoystick = new Joystick(0);
        operatorJoystick = new Joystick(1);
        
        rightBumper = new JoystickButton(driverJoystick, RIGHT_BUMPER);
        rightBumper.whenPressed(new ToggleCamera());
        
        leftBumper = new JoystickButton(driverJoystick, LEFT_BUMPER);
        leftBumper.whenPressed(new TurnToCamera());
        
        
        
        // Enabling one button as a time is dealt with in TransferCameraControl.execute().
        (new JoystickButton(driverJoystick, TRANSFER_CAMERA_CONTROL_BUTTON))
        	.whenPressed(new TransferCameraControl(TransferCameraControl.DRIVER));
        (new JoystickButton(operatorJoystick, TRANSFER_CAMERA_CONTROL_BUTTON))
        	.whenPressed(new TransferCameraControl(TransferCameraControl.OPERATOR));
        
        
        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("UseDrive", new UseDrive());
        SmartDashboard.putData("DriveServos", new DriveServos());
        SmartDashboard.putData("CentreCamera", new CentreCamera());
        
        bottomButton1 = new JoystickButton(operatorJoystick, 6);
        bottomButton2 = new JoystickButton(operatorJoystick, 7);
        bottomButton3 = new JoystickButton(operatorJoystick, 8);
        bottomButton4 = new JoystickButton(operatorJoystick, 9);
        bottomButton5 = new JoystickButton(operatorJoystick, 10);
        bottomButton6 = new JoystickButton(operatorJoystick, 11);
        
        bottomButton1.whenPressed(new MoveElevatorToPos(0));
        bottomButton2.whenPressed(new MoveElevatorToPos(1));
        bottomButton3.whenPressed(new MoveElevatorToPos(2));
        bottomButton4.whenPressed(new MoveElevatorToPos(3));
        bottomButton5.whenPressed(new MoveElevatorToPos(4));
        bottomButton6.whenPressed(new MoveElevatorToPos(5));
        
        switchElevatorFront = new JoystickButton(operatorJoystick, 3);
        switchElevatorFront.whenPressed(new ToggleElevator(Elevator.ELEVATOR_FRONT));
        
        switchElevatorBack = new JoystickButton(operatorJoystick, 2);
        switchElevatorBack.whenPressed(new ToggleElevator(Elevator.ELEVATOR_BACK));
         
    }
    
    public Joystick getDriverJoystick() {
        return driverJoystick;
    }
    
    public Joystick getOperatorJoystick() {
    	return operatorJoystick;
    }

}

